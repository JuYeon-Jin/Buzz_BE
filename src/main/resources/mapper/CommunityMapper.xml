<?xml version="1.0" encoding="UTF-8" ?>
<!DOCTYPE mapper
        PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN"
        "http://mybatis.org/dtd/mybatis-3-mapper.dtd">

<mapper namespace="com.buzz.community.dao.post.CommunityDAO">


    <!-- 게시판의 카테고리를 조회. -->
    <select id="selectCategoryList" resultType="com.buzz.community.dto.post.CategoryDTO">
        SELECT category_id, category_name
        FROM community_category
    </select>


    <!-- 공통 조건을 정의한 sql 엘리먼트. -->
    <sql id="filterCondition">
        <if test="startDate != null and endDate != null and startDate != '' and endDate != ''">
            AND c.created_at
                BETWEEN STR_TO_DATE(#{startDate}, '%Y-%m-%d')
                AND STR_TO_DATE(CONCAT(#{endDate}, ' 23:59:59'), '%Y-%m-%d %H:%i:%s')
        </if>
        <if test="categoryId != 0 and categoryId != null">
            AND c.category_id = #{categoryId}
        </if>
        <if test="keyword != null and keyword != ''">
            AND (c.title LIKE CONCAT('%', #{keyword}, '%')
                 OR u.name LIKE CONCAT('%', #{keyword}, '%')
                 OR c.content LIKE CONCAT('%', #{keyword}, '%'))
        </if>
    </sql>


    <!-- 전체 게시물의 수를 조회 (조건문이 있을시 조건 적용) -->
    <select id="countTotalPost" parameterType="com.buzz.community.dto.post.community.PostFilterDTO" resultType="int">
        SELECT COUNT(*)
        FROM community c
            JOIN users u
                ON c.user_id = u.user_id

        <where>
            <include refid="filterCondition"/>
        </where>
    </select>


    <!-- 게시물 목록을 조회 (조건문이 있을시 조건 적용) -->
    <select id="selectPostList" parameterType="com.buzz.community.dto.post.community.PostFilterDTO" resultType="com.buzz.community.dto.post.community.CommunityListDTO">
        SELECT
            c.post_id, c.title, c.views, u.name, cc.category_name, c.is_deleted,
            DATE_FORMAT(c.created_at, '%Y-%m-%d %H:%i') AS createdAt,
            CASE WHEN MAX(f.file_id) IS NOT NULL THEN true ELSE false END AS fileExist,
            COUNT(com.comment_id) AS commentCount
        FROM community c
            JOIN community_category cc
                ON c.category_id = cc.category_id
            JOIN users u
                ON c.user_id = u.user_id
            LEFT JOIN files f
                ON c.post_id = f.post_id
            LEFT JOIN comments com
                ON c.post_id = com.post_id

        <where>
            <include refid="filterCondition"/>
        </where>

        GROUP BY c.post_id, c.title, c.views, u.name, cc.category_name, c.is_deleted, createdAt

        ORDER BY
        <choose>
            <when test="sortCriteria == 'views'"> c.views </when>
            <otherwise> c.post_id </otherwise>
        </choose>
        <choose>
            <when test="sortDirection == 'asc'"> ASC </when>
            <otherwise> DESC </otherwise>
        </choose>

        LIMIT #{limit} OFFSET #{offset}
    </select>


    <!-- 개별 게시물 조회 -->
    <select id="selectPostById" parameterType="com.buzz.community.dto.post.ContentOwnerDTO" resultType="com.buzz.community.dto.post.community.CommunityDetailDTO">
        SELECT
            c.post_id, cc.category_name, u.name, c.title, c.content, c.views, c.user_id,
            DATE_FORMAT(c.created_at, '%Y-%m-%d %H:%i') AS createdAt,
            CASE WHEN c.user_id = #{userId} THEN true ELSE false END AS isOwner
        FROM community c
            JOIN users u
                ON c.user_id = u.user_id
            JOIN community_category cc
                ON c.category_id = cc.category_id
        WHERE c.post_id = #{postId}
        AND   c.is_deleted = false
    </select>

    <select id="selectFileMetadata" parameterType="int" resultType="com.buzz.community.dto.file.FileMetaListDTO">
        SELECT file_id, file_name, file_size
        FROM files
        WHERE post_id = #{postId}
    </select>


    <select id="fileDataForDownload" parameterType="int" resultType="com.buzz.community.dto.file.FileMetaDTO">
        SELECT file_name, file_path
        FROM files
        WHERE file_id = #{fileId}
    </select>


    <select id="selectComment" parameterType="com.buzz.community.dto.post.ContentOwnerDTO" resultType="com.buzz.community.dto.post.community.CommentListDTO">
        SELECT c.comment_id, u.name, c.content,
               DATE_FORMAT(c.created_at, '%Y-%m-%d %H:%i') AS createdAt,
               CASE WHEN c.user_id = #{userId} THEN true ELSE false END AS isOwner
        FROM comments c
                 JOIN users u ON c.user_id = u.user_id
        WHERE c.post_id = #{postId}
        ORDER BY comment_id ASC
    </select>


    <update id="incrementViewCount" parameterType="int">
        UPDATE community
        SET views = views + 1
        WHERE post_id = #{postId}
    </update>


    <!--
        게시물 테이블(post) 에 데이터를 저장합니다.
    -->
    <insert id="insertPost" parameterType="com.buzz.community.dto.post.community.PostInsertDTO" useGeneratedKeys="true" keyProperty="postId">
        INSERT INTO community (category_id, title, content, user_id)
        VALUES (#{categoryId}, #{title}, #{content}, #{userId})
    </insert>


    <insert id="insertFileMetadata" parameterType="com.buzz.community.dto.file.FileMetaInsertDTO">
        INSERT INTO files (post_id, file_name, file_size, content_type, file_path)
        VALUES (#{postId}, #{fileName}, #{fileSize}, #{contentType}, #{filePath})
    </insert>


    <insert id="insertComment" parameterType="com.buzz.community.dto.post.community.CommentInsertDTO">
        INSERT INTO comments (post_id, user_id, content)
        VALUES (#{postId}, #{userId}, #{content});
    </insert>

    <delete id="deleteComment" parameterType="int">
        DELETE FROM comments
        WHERE comment_id = #{commentId}
    </delete>

    <delete id="deletePost" parameterType="com.buzz.community.dto.post.ContentOwnerDTO">
        DELETE FROM community
        WHERE post_id = #{postId}
        AND user_id = #{userId}
    </delete>

    <select id="hasComments" parameterType="int" resultType="boolean">
        SELECT EXISTS (SELECT 1 FROM comments WHERE post_id = #{postId})
    </select>

</mapper>